{"version":3,"file":"native.js","sourceRoot":"","sources":["../../src/modal/native.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;AAqBb,sDAKC;AAaD,0EAKC;AAQD,4DAKC;AAvDD,+BAAyC;AACzC,+CAAwD;AAUxD,MAAM,kBAAkB,GAAG,CAAC,KAAK,EAAE,SAAS,CAAU,CAAC;AAEvD,MAAM,mBAAmB,GAAI,kBAAwC,CAAC,QAAQ,CAAC,uBAAQ,CAAC,EAAE,CAAC,CAAC;AAE5F,MAAM,yBAAyB,GAA0C,mBAAmB;IAC1F,CAAC,CAAC,IAAA,wBAAiB,EAAC,uBAAuB,EAAE,qBAAqB,CAAC;IACnE,CAAC,CAAC,IAAI,CAAC;AAET,SAAgB,qBAAqB,CAAC,KAAgB;IACpD,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,yBAAyB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAClD,CAAC;AAQD,MAAM,mCAAmC,GAE9B,mBAAmB;IAC5B,CAAC,CAAC,IAAA,wBAAiB,EAAC,uBAAuB,EAAE,+BAA+B,CAAC;IAC7E,CAAC,CAAC,IAAI,CAAC;AACT,SAAgB,+BAA+B,CAAC,KAA0B;IACxE,IAAI,CAAC,mCAAmC,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,mCAAmC,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAG,CAAC;AAC7F,CAAC;AAKD,MAAM,4BAA4B,GAA6C,mBAAmB;IAChG,CAAC,CAAC,IAAA,wBAAiB,EAAC,uBAAuB,EAAE,wBAAwB,CAAC;IACtE,CAAC,CAAC,IAAI,CAAC;AACT,SAAgB,wBAAwB,CAAC,KAAmB;IAC1D,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,4BAA4B,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACrD,CAAC;AACD,aAAa","sourcesContent":["'use client';\n\nimport { requireNativeView } from 'expo';\nimport { Platform, type ViewProps } from 'react-native';\n\n// #region Portal Host View\nexport interface HostProps extends ViewProps {\n  hostId: string;\n  fluid?: boolean;\n  onRegistered?: (event: { nativeEvent: { hostId: string } }) => void;\n  onUnregistered?: (event: { nativeEvent: { hostId: string } }) => void;\n}\n\nconst supportedPlatforms = ['ios', 'android'] as const;\n\nconst isPlatformSupported = (supportedPlatforms as readonly string[]).includes(Platform.OS);\n\nconst NativeModalPortalHostView: React.ComponentType<HostProps> | null = isPlatformSupported\n  ? requireNativeView('ExpoRouterModalPortal', 'ModalPortalHostView')\n  : null;\n\nexport function NativeModalPortalHost(props: HostProps) {\n  if (!NativeModalPortalHostView) {\n    return null;\n  }\n  return <NativeModalPortalHostView {...props} />;\n}\n// #endregion\n\n// #region Portal Content View Wrapper\nexport interface ContentWrapperProps {\n  hostId: string;\n  children: React.ReactNode;\n}\nconst NativeModalPortalContentWrapperView: React.ComponentType<\n  ContentWrapperProps & ViewProps\n> | null = isPlatformSupported\n  ? requireNativeView('ExpoRouterModalPortal', 'ModalPortalContentWrapperView')\n  : null;\nexport function NativeModalPortalContentWrapper(props: ContentWrapperProps) {\n  if (!NativeModalPortalContentWrapperView) {\n    return null;\n  }\n  return <NativeModalPortalContentWrapperView {...props} style={{ position: 'absolute' }} />;\n}\n// #endregion\n\n// #region Portal Content View\nexport interface ContentProps extends ViewProps {}\nconst NativeModalPortalContentView: React.ComponentType<ContentProps> | null = isPlatformSupported\n  ? requireNativeView('ExpoRouterModalPortal', 'ModalPortalContentView')\n  : null;\nexport function NativeModalPortalContent(props: ContentProps) {\n  if (!NativeModalPortalContentView) {\n    return null;\n  }\n  return <NativeModalPortalContentView {...props} />;\n}\n// #endregion\n"]}